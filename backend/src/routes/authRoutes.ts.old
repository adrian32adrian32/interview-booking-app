// backend/src/routes/authRoutes.ts

import { Router, Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { pool } from '../server';

const router = Router();

// Secret pentru JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-2025';

// POST /api/auth/login
router.post('/login', async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;

    // Validare
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email și parola sunt obligatorii'
      });
    }

    // Caută utilizatorul
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    const user = result.rows[0];

    // Verifică parola - încearcă ambele câmpuri pentru compatibilitate
    const passwordToCheck = user.password_hash || user.password;
    
    if (!passwordToCheck) {
      console.error('No password found for user:', email);
      return res.status(500).json({
        success: false,
        message: 'Eroare de configurare cont'
      });
    }

    const isValidPassword = await bcrypt.compare(password, passwordToCheck);

    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    // Verifică dacă utilizatorul este activ (dacă câmpul există)
    if (user.is_active !== undefined && !user.is_active) {
      return res.status(403).json({
        success: false,
        message: 'Contul tău a fost dezactivat'
      });
    }

    // Construiește numele complet
    const fullName = user.name || 
                    user.username || 
                    (user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : null) ||
                    user.email.split('@')[0];

    // Generează token JWT
    const token = jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        role: user.role,
        name: fullName
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // Trimite răspuns în formatul așteptat de frontend
    res.json({
      success: true,
      message: 'Autentificare reușită',
      data: {
        accessToken: token,
        user: {
          id: user.id,
          name: fullName,
          email: user.email,
          role: user.role,
          avatar: user.avatar || null
        }
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Eroare la autentificare'
    });
  }
});

// POST /api/auth/register
router.post('/register', async (req: Request, res: Response) => {
  try {
    const { name, email, password, phone } = req.body;

    // Validare
    if (!name || !email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Toate câmpurile sunt obligatorii'
      });
    }

    // Verifică dacă email-ul există deja
    const existingUser = await pool.query(
      'SELECT id FROM users WHERE email = $1',
      [email]
    );

    if (existingUser.rows.length > 0) {
      return res.status(409).json({
        success: false,
        message: 'Email-ul este deja înregistrat'
      });
    }

    // Hash parolă
    const hashedPassword = await bcrypt.hash(password, 10);

    // Împarte numele în first_name și last_name
    const nameParts = name.trim().split(' ');
    const firstName = nameParts[0];
    const lastName = nameParts.slice(1).join(' ') || '';

    // Creează utilizator - adaptează pentru structura ta de DB
    const result = await pool.query(
      `INSERT INTO users (username, first_name, last_name, email, password_hash, phone, role) 
       VALUES ($1, $2, $3, $4, $5, $6, 'user') 
       RETURNING id, username, first_name, last_name, email, role, created_at`,
      [email.split('@')[0], firstName, lastName, email, hashedPassword, phone || null]
    );

    const newUser = result.rows[0];
    const fullName = `${newUser.first_name} ${newUser.last_name}`.trim() || newUser.username;

    // Generează token
    const token = jwt.sign(
      { 
        id: newUser.id, 
        email: newUser.email, 
        role: newUser.role,
        name: fullName
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.status(201).json({
      success: true,
      message: 'Cont creat cu succes',
      data: {
        accessToken: token,
        user: {
          id: newUser.id,
          name: fullName,
          email: newUser.email,
          role: newUser.role
        }
      }
    });

  } catch (error) {
    console.error('Register error:', error);
    res.status(500).json({
      success: false,
      message: 'Eroare la înregistrare'
    });
  }
});

// POST /api/auth/logout
router.post('/logout', (req: Request, res: Response) => {
  res.json({
    success: true,
    message: 'Delogare reușită'
  });
});

// GET /api/auth/me
router.get('/me', async (req: Request, res: Response) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Token lipsă'
      });
    }

    const token = authHeader.substring(7);

    // Verifică token
    const decoded = jwt.verify(token, JWT_SECRET) as any;

    // Obține date actualizate despre utilizator
    const result = await pool.query(
      `SELECT id, username, first_name, last_name, email, role, phone, avatar, 
              COALESCE(is_active, true) as is_active 
       FROM users 
       WHERE id = $1`,
      [decoded.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Utilizator negăsit'
      });
    }

    const user = result.rows[0];
    const fullName = user.first_name && user.last_name 
      ? `${user.first_name} ${user.last_name}`.trim()
      : user.username || user.email.split('@')[0];

    res.json({
      success: true,
      user: {
        id: user.id,
        name: fullName,
        email: user.email,
        role: user.role,
        phone: user.phone,
        avatar: user.avatar,
        is_active: user.is_active
      }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(401).json({
      success: false,
      message: 'Token invalid'
    });
  }
});

// POST /api/auth/change-password
router.post('/change-password', async (req: Request, res: Response) => {
  try {
    const { currentPassword, newPassword } = req.body;
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Token lipsă'
      });
    }

    const token = authHeader.substring(7);
    const decoded = jwt.verify(token, JWT_SECRET) as any;

    // Obține utilizatorul
    const userResult = await pool.query(
      'SELECT password_hash, password FROM users WHERE id = $1',
      [decoded.id]
    );

    if (userResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Utilizator negăsit'
      });
    }

    const user = userResult.rows[0];
    const currentPasswordHash = user.password_hash || user.password;

    // Verifică parola curentă
    const isValidPassword = await bcrypt.compare(currentPassword, currentPasswordHash);
    
    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'Parola curentă este incorectă'
      });
    }

    // Hash parola nouă
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // Actualizează parola în câmpul corect
    await pool.query(
      'UPDATE users SET password_hash = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
      [hashedPassword, decoded.id]
    );

    res.json({
      success: true,
      message: 'Parola a fost schimbată cu succes'
    });

  } catch (error) {
    console.error('Change password error:', error);
    res.status(500).json({
      success: false,
      message: 'Eroare la schimbarea parolei'
    });
  }
});

// Endpoint special pentru a evita validarea - similar cu cel căutat de frontend
router.post('/login-no-validation', async (req: Request, res: Response) => {
  // Redirecționează către login-ul normal
  return router.handle(req, res);
});

export default router;