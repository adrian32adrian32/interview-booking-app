// backend/src/routes/authRoutes.ts

import { Router, Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { pool } from '../server';

const router = Router();

// Secret pentru JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-2025';

// POST /api/auth/login
router.post('/login', async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;

    // Validare
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: 'Email și parola sunt obligatorii'
      });
    }

    // Caută utilizatorul
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    const user = result.rows[0];

    // Verifică parola - încearcă ambele câmpuri pentru compatibilitate
    const passwordToCheck = user.password_hash || user.password;
    
    if (!passwordToCheck) {
      console.error('No password found for user:', email);
      return res.status(500).json({
        success: false,
        message: 'Eroare de configurare cont'
      });
    }

    const isValidPassword = await bcrypt.compare(password, passwordToCheck);

    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    // Verifică dacă utilizatorul este activ (dacă câmpul există)
    if (user.is_active !== undefined && !user.is_active) {
      return res.status(403).json({
        success: false,
        message: 'Contul tău a fost dezactivat'
      });
    }

    // Construiește numele complet
    const fullName = user.name || 
                    user.username || 
                    (user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : null) ||
                    user.email.split('@')[0];

    // Generează token JWT
    const token = jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        role: user.role,
        name: fullName
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // Trimite răspuns în formatul așteptat de frontend
    res.json({
      success: true,
      message: 'Autentificare reușită',
      data: {
        accessToken: token,
        user: {
          id: user.id,
          name: fullName,
          email: user.email,
          role: user.role,
          avatar: user.avatar || null
        }
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Eroare la autentificare'
    });
  }
});

// POST /api/auth/logout
router.post('/logout', (req: Request, res: Response) => {
  res.json({
    success: true,
    message: 'Delogare reușită'
  });
});

// GET /api/auth/me
router.get('/me', async (req: Request, res: Response) => {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Token lipsă'
      });
    }

    const token = authHeader.substring(7);

    // Verifică token
    const decoded = jwt.verify(token, JWT_SECRET) as any;

    // Obține date actualizate despre utilizator
    const result = await pool.query(
      `SELECT id, username, first_name, last_name, email, role, phone, avatar 
       FROM users 
       WHERE id = $1`,
      [decoded.id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Utilizator negăsit'
      });
    }

    const user = result.rows[0];
    const fullName = user.first_name && user.last_name 
      ? `${user.first_name} ${user.last_name}`.trim()
      : user.username || user.email.split('@')[0];

    res.json({
      success: true,
      user: {
        id: user.id,
        name: fullName,
        email: user.email,
        role: user.role,
        phone: user.phone,
        avatar: user.avatar
      }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(401).json({
      success: false,
      message: 'Token invalid'
    });
  }
});

export default router;
        message: 'Email și parola sunt obligatorii'
      });
    }

    // Caută utilizatorul
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );

    if (result.rows.length === 0) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    const user = result.rows[0];

    // Verifică parola - încearcă ambele câmpuri pentru compatibilitate
    const passwordToCheck = user.password_hash || user.password;
    
    if (!passwordToCheck) {
      console.error('No password found for user:', email);
      return res.status(500).json({
        success: false,
        message: 'Eroare de configurare cont'
      });
    }

    const isValidPassword = await bcrypt.compare(password, passwordToCheck);

    if (!isValidPassword) {
      return res.status(401).json({
        success: false,
        message: 'Email sau parolă incorectă'
      });
    }

    // Construiește numele complet
    const fullName = user.name || 
                    user.username || 
                    (user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : null) ||
                    user.email.split('@')[0];

    // Generează token JWT
    const token = jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        role: user.role,
        name: fullName
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // Trimite răspuns în formatul așteptat de frontend
    res.json({
      success: true,
      message: 'Autentificare reușită',
      data: {
        accessToken: token,
        user: {
          id: user.id,
          name: fullName,
          email: user.email,
          role: user.role,
          avatar: user.avatar || null
        }
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Eroare la autentificare'
    });
  }
});

export default router;
