import { Router } from 'express';
import { authMiddleware } from '../middleware/authMiddleware';

const router = Router();

// Import controller functions
const {
  uploadDocument,
  getUserDocuments,
  deleteDocument
} = require('../controllers/uploadController.js');

// Routes
router.post('/document', authMiddleware, uploadDocument);
router.get('/documents', authMiddleware, getUserDocuments);
router.delete('/document/:id', authMiddleware, deleteDocument);

// Download route - pentru mai târziu
router.get('/download/:id', authMiddleware, async (req: any, res: any) => {
  const pool = require('../config/database');
  const path = require('path');
  const fs = require('fs');
  
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    let query = 'SELECT * FROM documents WHERE id = $1';
    let params = [id];
    
    if (req.user.role !== 'admin') {
      query += ' AND user_id = $2';
      params.push(userId);
    }
    
    const result = await pool.query(query, params);
    
    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Document not found'
      });
    }
    
    const doc = result.rows[0];
    let filePath = doc.path || doc.file_url;
    
    // Dacă nu e cale absolută, construiește-o
    if (filePath && !path.isAbsolute(filePath)) {
      filePath = path.join(__dirname, '../../uploads/documents', doc.file_name || doc.filename);
    }
    
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({
        success: false,
        message: 'File not found on server'
      });
    }
    
    res.download(filePath, doc.original_name || doc.file_name);
    
  } catch (error) {
    console.error('Download error:', error);
    res.status(500).json({
      success: false,
      message: 'Error downloading document'
    });
  }
});

export default router;