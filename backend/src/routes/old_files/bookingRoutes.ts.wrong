import { Request, Response } from 'express';
import { pool } from '../server';

// Get all bookings
export const getAllBookings = async (req: Request, res: Response) => {
  try {
    const result = await pool.query(`
      SELECT 
        id,
        client_name,
        client_email,
        client_phone,
        COALESCE(interview_date, date) as interview_date,
        COALESCE(interview_time, time_slot) as interview_time,
        COALESCE(interview_type, 
          CASE 
            WHEN interview_type IS NULL THEN 'online'
            ELSE interview_type 
          END
        ) as interview_type,
        status,
        notes,
        created_at,
        updated_at
      FROM bookings 
      ORDER BY COALESCE(interview_date, date) DESC, COALESCE(interview_time, time_slot) DESC
    `);
    
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching bookings:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch bookings' 
    });
  }
};

// Get booking by ID
export const getBookingById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const result = await pool.query(
      `SELECT 
        id,
        client_name,
        client_email,
        client_phone,
        COALESCE(interview_date, date) as interview_date,
        COALESCE(interview_time, time_slot) as interview_time,
        COALESCE(interview_type, 'online') as interview_type,
        status,
        notes,
        created_at,
        updated_at
      FROM bookings 
      WHERE id = $1`,
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: 'Booking not found' 
      });
    }
    
    res.json({
      success: true,
      data: result.rows[0]
    });
  } catch (error) {
    console.error('Error fetching booking:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch booking' 
    });
  }
};

// Create new booking
export const createBooking = async (req: Request, res: Response) => {
  try {
    const {
      client_name,
      client_email,
      client_phone,
      interview_date,
      interview_time,
      interview_type = 'online',
      notes = '',
      status = 'pending',
      created_by = 'client'
    } = req.body;

    // Validate required fields
    if (!client_name || !client_email || !client_phone || !interview_date || !interview_time) {
      return res.status(400).json({ 
        success: false, 
        error: 'Missing required fields' 
      });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(client_email)) {
      return res.status(400).json({ 
        success: false, 
        error: 'Invalid email format' 
      });
    }

    // Check if slot is already booked
    const existingBooking = await pool.query(
      `SELECT id FROM bookings 
       WHERE (interview_date = $1 OR date = $1::date)
       AND (interview_time = $2 OR time_slot = $2)
       AND status != 'cancelled'`,
      [interview_date, interview_time]
    );

    if (existingBooking.rows.length > 0) {
      return res.status(409).json({ 
        success: false, 
        error: 'This time slot is already booked' 
      });
    }

    // Insert new booking - compatibil cu structura existentă
    const result = await pool.query(
      `INSERT INTO bookings 
       (client_name, client_email, client_phone, date, time_slot, 
        interview_date, interview_time, interview_type, notes, status)
       VALUES ($1, $2, $3, $4::date, $5, $4::date, $5, $6, $7, $8)
       RETURNING *`,
      [client_name, client_email, client_phone, interview_date, interview_time, 
       interview_type, notes, status]
    );

    // Trimite email de confirmare (TODO: implementează emailService)
    // await emailService.sendConfirmationEmail(result.rows[0]);

    res.status(201).json({
      success: true,
      message: 'Booking created successfully',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('Error creating booking:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to create booking',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// Update booking
export const updateBooking = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const updates = req.body;

    // Build dynamic update query
    const updateFields = [];
    const values = [];
    let paramCount = 1;

    // Lista câmpurilor care pot fi actualizate
    const allowedFields = ['status', 'notes', 'interview_date', 'interview_time', 'interview_type'];
    
    for (const [key, value] of Object.entries(updates)) {
      if (allowedFields.includes(key) && value !== undefined) {
        updateFields.push(`${key} = $${paramCount}`);
        values.push(value);
        
        // Actualizează și câmpurile legacy dacă e cazul
        if (key === 'interview_date') {
          updateFields.push(`date = $${paramCount}`);
        } else if (key === 'interview_time') {
          updateFields.push(`time_slot = $${paramCount}`);
        }
        
        paramCount++;
      }
    }

    if (updateFields.length === 0) {
      return res.status(400).json({ 
        success: false, 
        error: 'No valid fields to update' 
      });
    }

    values.push(id);
    const query = `
      UPDATE bookings 
      SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP
      WHERE id = $${paramCount}
      RETURNING *
    `;

    const result = await pool.query(query, values);

    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: 'Booking not found' 
      });
    }

    res.json({
      success: true,
      message: 'Booking updated successfully',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('Error updating booking:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to update booking' 
    });
  }
};

// Delete booking
export const deleteBooking = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const result = await pool.query(
      'DELETE FROM bookings WHERE id = $1 RETURNING id',
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: 'Booking not found' 
      });
    }

    res.json({ 
      success: true,
      message: 'Booking deleted successfully' 
    });
  } catch (error) {
    console.error('Error deleting booking:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to delete booking' 
    });
  }
};

// Get bookings by date
export const getBookingsByDate = async (req: Request, res: Response) => {
  try {
    const { date } = req.params;
    
    const result = await pool.query(
      `SELECT 
        id,
        client_name,
        client_email,
        client_phone,
        COALESCE(interview_date, date) as interview_date,
        COALESCE(interview_time, time_slot) as interview_time,
        COALESCE(interview_type, 'online') as interview_type,
        status,
        notes,
        created_at
      FROM bookings 
      WHERE (interview_date = $1 OR date = $1::date)
      AND status != 'cancelled'
      ORDER BY COALESCE(interview_time, time_slot)`,
      [date]
    );
    
    res.json({
      success: true,
      date: date,
      count: result.rows.length,
      data: result.rows
    });
  } catch (error) {
    console.error('Error fetching bookings by date:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch bookings' 
    });
  }
};

// Get available time slots for a specific date
export const getAvailableTimeSlots = async (req: Request, res: Response) => {
  try {
    const { date } = req.params;
    
    // Toate sloturile posibile (9:00 - 18:00, interval 30 min)
    const allSlots = [
      '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
      '12:00', '12:30', '13:00', '13:30', '14:00', '14:30',
      '15:00', '15:30', '16:00', '16:30', '17:00', '17:30'
    ];
    
    // Obține sloturile ocupate pentru data respectivă
    const bookedSlots = await pool.query(
      `SELECT 
        COALESCE(interview_time, time_slot) as time_slot 
      FROM bookings 
      WHERE (interview_date = $1 OR date = $1::date)
      AND status != 'cancelled'`,
      [date]
    );
    
    const bookedTimes = bookedSlots.rows.map(row => row.time_slot);
    const availableSlots = allSlots.filter(slot => !bookedTimes.includes(slot));
    
    res.json({
      success: true,
      date,
      allSlots,
      availableSlots,
      bookedSlots: bookedTimes,
      workingHours: {
        start: '09:00',
        end: '18:00',
        interval: 30
      }
    });
  } catch (error) {
    console.error('Error fetching available slots:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch available slots' 
    });
  }
};
export default router;
