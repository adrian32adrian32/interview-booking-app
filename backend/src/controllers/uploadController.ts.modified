import { Request, Response } from 'express';
import path from 'path';
import fs from 'fs';
import { pool } from '../server';

// Upload document handler
export const uploadDocument = async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        success: false, 
        message: 'Nu a fost încărcat niciun fișier' 
      });
    }

    const userId = (req as any).userId;
    const { type = 'other', bookingId } = req.body;
    const fileUrl = `/uploads/documents/${req.file.filename}`;

    // Salvează în baza de date cu toate câmpurile necesare
    const result = await pool.query(
      `INSERT INTO documents 
       (user_id, type, filename, original_name, path, size, mime_type, status, 
        file_url, file_name, file_size, booking_id, uploaded_by, uploaded_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, CURRENT_TIMESTAMP) 
       RETURNING *`,
      [
        userId, 
        type, 
        req.file.filename, 
        req.file.originalname, 
        req.file.path, 
        req.file.size, 
        req.file.mimetype, 
        'pending',
        fileUrl,
        req.file.originalname,
        req.file.size,
        bookingId || null,
        'user'
      ]
    );

    res.json({
      success: true,
      message: 'Document încărcat cu succes',
      document: result.rows[0]
    });
  } catch (error) {
    console.error('Upload error:', error);
    
    // Șterge fișierul dacă salvarea în DB eșuează
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la încărcarea documentului' 
    });
  }
};

// Get user documents
export const getUserDocuments = async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId;
    const userRole = (req as any).userRole;
    
    // Pentru admin, poate vedea documentele oricărui user
    let query;
    let params;
    
    if (userRole === 'admin' && req.query.userId) {
      query = `
        SELECT d.*, 
          CASE 
            WHEN d.uploaded_by = 'admin' THEN 'Încărcat de admin'
            ELSE 'Încărcat de utilizator'
          END as upload_source,
          u.first_name, 
          u.last_name, 
          u.email as user_email
        FROM documents d
        LEFT JOIN users u ON u.id = d.user_id
        WHERE d.user_id = $1 
        ORDER BY d.uploaded_at DESC
      `;
      params = [req.query.userId];
    } else {
      // User normal vede doar documentele lui
      query = `
        SELECT *, 
          CASE 
            WHEN uploaded_by = 'admin' THEN 'Încărcat de admin'
            ELSE 'Încărcat de tine'
          END as upload_source
        FROM documents 
        WHERE user_id = $1 
        ORDER BY uploaded_at DESC
      `;
      params = [userId];
    }
    
    const result = await pool.query(query, params);
    
    res.json({ 
      success: true, 
      documents: result.rows 
    });
  } catch (error) {
    console.error('Get documents error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la obținerea documentelor' 
    });
  }
};

// Delete document
export const deleteDocument = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const userId = (req as any).userId;
    const userRole = (req as any).userRole;
    
    // Găsește documentul
    let doc;
    if (userRole === 'admin') {
      // Admin poate șterge orice document
      doc = await pool.query('SELECT * FROM documents WHERE id = $1', [id]);
    } else {
      // User poate șterge doar documentele proprii
      doc = await pool.query(
        'SELECT * FROM documents WHERE id = $1 AND user_id = $2',
        [id, userId]
      );
    }
    
    if (doc.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Document negăsit sau nu ai permisiunea să-l ștergi' 
      });
    }
    
    // Șterge fișierul fizic
    if (fs.existsSync(doc.rows[0].path)) {
      fs.unlinkSync(doc.rows[0].path);
    }
    
    // Șterge din DB
    await pool.query('DELETE FROM documents WHERE id = $1', [id]);
    
    res.json({ 
      success: true, 
      message: 'Document șters cu succes' 
    });
  } catch (error) {
    console.error('Delete error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la ștergerea documentului' 
    });
  }
};

// Admin upload document for a user
export const adminUploadDocument = async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ 
        success: false, 
        message: 'Nu a fost încărcat niciun fișier' 
      });
    }

    const { userId, type = 'identity' } = req.body;
    
    if (!userId) {
      // Șterge fișierul dacă nu e specificat userId
      if (fs.existsSync(req.file.path)) {
        fs.unlinkSync(req.file.path);
      }
      return res.status(400).json({ 
        success: false, 
        message: 'ID-ul utilizatorului este obligatoriu' 
      });
    }

    const fileUrl = `/uploads/documents/${req.file.filename}`;
    
    const result = await pool.query(
      `INSERT INTO documents 
       (user_id, type, filename, original_name, path, size, mime_type, status, 
        file_url, file_name, file_size, verified_by_admin, verified_at, uploaded_by, uploaded_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, CURRENT_TIMESTAMP) 
       RETURNING *`,
      [
        userId, 
        type, 
        req.file.filename, 
        req.file.originalname, 
        req.file.path, 
        req.file.size, 
        req.file.mimetype, 
        'verified',
        fileUrl,
        req.file.originalname,
        req.file.size,
        true,
        new Date(),
        'admin'
      ]
    );
    
    res.json({
      success: true,
      message: 'Document încărcat și verificat cu succes',
      document: result.rows[0]
    });
  } catch (error) {
    console.error('Admin upload error:', error);
    
    // Șterge fișierul dacă salvarea în DB eșuează
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la încărcarea documentului' 
    });
  }
};

// Update document status (admin only)
export const updateDocumentStatus = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    const adminId = (req as any).userId;
    
    if (!['pending', 'verified', 'rejected'].includes(status)) {
      return res.status(400).json({ 
        success: false, 
        message: 'Status invalid' 
      });
    }
    
    const result = await pool.query(
      `UPDATE documents 
       SET status = $1, 
           verified_by_admin = $2, 
           verified_at = $3
       WHERE id = $4
       RETURNING *`,
      [
        status, 
        status === 'verified' ? true : false,
        status === 'verified' ? new Date() : null,
        id
      ]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Document negăsit' 
      });
    }
    
    res.json({
      success: true,
      message: `Document ${status === 'verified' ? 'verificat' : status === 'rejected' ? 'respins' : 'în așteptare'}`,
      document: result.rows[0]
    });
  } catch (error) {
    console.error('Update document status error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la actualizarea statusului' 
    });
  }
};

// Get document by ID
export const getDocument = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const userId = (req as any).userId;
    const userRole = (req as any).userRole;
    
    let query;
    let params;
    
    if (userRole === 'admin') {
      query = 'SELECT * FROM documents WHERE id = $1';
      params = [id];
    } else {
      query = 'SELECT * FROM documents WHERE id = $1 AND user_id = $2';
      params = [id, userId];
    }
    
    const result = await pool.query(query, params);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Document negăsit' 
      });
    }
    
    res.json({ 
      success: true, 
      document: result.rows[0] 
    });
  } catch (error) {
    console.error('Get document error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Eroare la obținerea documentului' 
    });
  }
};