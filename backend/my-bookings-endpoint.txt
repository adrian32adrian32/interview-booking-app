
// Get user's bookings
app.get('/api/bookings/my-bookings', async (req: Request, res: Response) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, message: 'Nu e»ôti autentificat' });
    }
    
    const token = authHeader.split(' ')[1];
    let userId;
    
    try {
      const decoded = jwt.verify(token, JWT_SECRET) as any;
      userId = decoded.userId || decoded.id;
    } catch (error) {
      return res.status(401).json({ success: false, message: 'Token invalid' });
    }
    
    // Get user's email
    const userResult = await pool.query('SELECT email FROM users WHERE id = $1', [userId]);
    if (userResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: 'User not found' });
    }
    
    const userEmail = userResult.rows[0].email;
    
    // Get bookings
    const result = await pool.query(`
      SELECT 
        id,
        client_name,
        client_email,
        client_phone,
        interview_date,
        interview_time,
        interview_type,
        status,
        notes,
        created_at
      FROM client_bookings 
      WHERE client_email = $1
      ORDER BY interview_date DESC, interview_time DESC
    `, [userEmail]);
    
    res.json({
      success: true,
      bookings: result.rows
    });
  } catch (error) {
    console.error('Error fetching user bookings:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch bookings' 
    });
  }
});
