
// Temporary Upload Endpoints
import multer from 'multer';
import path from 'path';
import fs from 'fs';

// Configurare multer pentru upload
const uploadStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '../uploads/documents');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const uploadMiddleware = multer({ 
  storage: uploadStorage,
  limits: { fileSize: 10 * 1024 * 1024 },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|pdf/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Doar imagini (JPEG, PNG) și PDF-uri sunt permise!'));
    }
  }
});

// Upload document endpoint
app.post('/api/upload/document', authMiddleware, uploadMiddleware.single('file'), async (req: Request, res: Response) => {
  try {
    if (!req.file) {
      return res.status(400).json({ success: false, message: 'Nu a fost încărcat niciun fișier' });
    }

    const userId = (req as any).userId;
    const { type = 'other' } = req.body;

    // Salvează în baza de date
    const result = await pool.query(
      `INSERT INTO documents (user_id, type, filename, original_name, path, size, mime_type, status)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`,
      [userId, type, req.file.filename, req.file.originalname, req.file.path, req.file.size, req.file.mimetype, 'pending']
    );

    res.json({
      success: true,
      message: 'Document încărcat cu succes',
      document: result.rows[0]
    });
  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ success: false, message: 'Eroare la încărcare' });
  }
});

// Get user documents
app.get('/api/upload/documents', authMiddleware, async (req: Request, res: Response) => {
  try {
    const userId = (req as any).userId;
    
    const result = await pool.query(
      'SELECT * FROM documents WHERE user_id = $1 ORDER BY uploaded_at DESC',
      [userId]
    );
    
    res.json({ success: true, documents: result.rows });
  } catch (error) {
    console.error('Get documents error:', error);
    res.status(500).json({ success: false, message: 'Eroare la obținerea documentelor' });
  }
});

// Delete document
app.delete('/api/upload/document/:id', authMiddleware, async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const userId = (req as any).userId;
    
    const doc = await pool.query(
      'SELECT * FROM documents WHERE id = $1 AND user_id = $2',
      [id, userId]
    );
    
    if (doc.rows.length === 0) {
      return res.status(404).json({ success: false, message: 'Document negăsit' });
    }
    
    // Șterge fișierul
    if (fs.existsSync(doc.rows[0].path)) {
      fs.unlinkSync(doc.rows[0].path);
    }
    
    // Șterge din DB
    await pool.query('DELETE FROM documents WHERE id = $1', [id]);
    
    res.json({ success: true, message: 'Document șters cu succes' });
  } catch (error) {
    console.error('Delete error:', error);
    res.status(500).json({ success: false, message: 'Eroare la ștergere' });
  }
});

