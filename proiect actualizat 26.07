Iată documentul complet:
markdown# Interview Booking Application 📅

O aplicație web completă pentru gestionarea programărilor la interviuri, dezvoltată cu tehnologii moderne și best practices.

## 📋 Cuprins

- [Demo Live](#-demo-live)
- [Funcționalități](#-funcționalități)
- [Stack Tehnologic](#-stack-tehnologic)
- [Arhitectura Aplicației](#-arhitectura-aplicației)
- [Structura Proiectului](#-structura-proiectului)
- [API Documentation](#-api-documentation)
- [Instalare și Configurare](#-instalare-și-configurare)
- [Deployment](#-deployment)
- [Baza de Date](#-baza-de-date)
- [Securitate](#-securitate)
- [Comenzi Utile](#-comenzi-utile)
- [Troubleshooting](#-troubleshooting)
- [Contribuții](#-contribuții)

## 🚀 Demo Live

**URL Production:** http://94.156.250.138

### Conturi de test:
- **Admin:** admin@example.com / admin123
- **User:** test@example.com / test123

## ✨ Funcționalități

### 🔐 Sistem de Autentificare
- Login/Register cu validare
- Reset parolă prin email
- JWT tokens pentru sesiuni
- Refresh tokens
- Middleware de autorizare pe roluri

### 👤 Portal Utilizator
- **Dashboard personal** cu statistici
- **Programări**
  - Creare programare nouă (3 pași)
  - Vizualizare programări proprii
  - Anulare/Modificare programări
  - Calendar interactiv
- **Documente**
  - Upload documente (PDF, JPG, PNG)
  - Vizualizare/Download documente
  - Organizare pe programări
- **Profil**
  - Editare date personale
  - Schimbare parolă
  - Upload avatar

### 👨‍💼 Portal Administrator
- **Dashboard** cu statistici în timp real
  - Total utilizatori/programări
  - Grafice interactive (Chart.js)
  - Export date (CSV/Excel)
- **Gestionare Utilizatori**
  - CRUD complet utilizatori
  - Activare/Dezactivare conturi
  - Resetare parole
  - Vizualizare documente utilizatori
- **Gestionare Programări**
  - Vezi toate programările
  - Filtrare și sortare avansată
  - Modificare status programări
  - Export rapoarte
- **Setări Sistem**
  - Configurare sloturi de timp
  - Blocare date pentru programări
  - Setări email

### 🎨 UI/UX Features
- **3 Teme**: Light, Dark, Futuristic
- **Responsive Design** - Mobile first
- **Real-time updates**
- **Loading states și error handling**
- **Toast notifications**
- **Animații smooth**

## 🛠 Stack Tehnologic

### Backend
- **Runtime:** Node.js v18.x
- **Framework:** Express.js 4.x
- **Language:** TypeScript 5.x
- **Database:** PostgreSQL 14
- **ORM:** Raw SQL cu `pg` library
- **Authentication:** JWT + bcrypt
- **Validation:** express-validator
- **File Upload:** Multer
- **Email:** Nodemailer
- **Process Manager:** PM2

### Frontend
- **Framework:** Next.js 15.4.1 (App Router)
- **Language:** TypeScript 5.x
- **Styling:** Tailwind CSS 3.x
- **UI Components:** Custom + shadcn/ui
- **Icons:** Lucide React
- **HTTP Client:** Axios
- **State Management:** React Context API
- **Forms:** React Hook Form
- **Charts:** Chart.js + Recharts
- **Date Handling:** date-fns
- **Notifications:** react-hot-toast

### DevOps
- **Server:** Ubuntu 22.04 LTS
- **Web Server:** Nginx (reverse proxy)
- **SSL:** Let's Encrypt (certbot)
- **CI/CD:** GitHub Actions (planned)
- **Monitoring:** PM2 Metrics
- **Logging:** Winston (planned)

## 🏗 Arhitectura Aplicației
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   Next.js App   │────▶│  Express API    │────▶│   PostgreSQL    │
│   (Port 3000)   │     │  (Port 5000)    │     │   (Port 5432)   │
│                 │     │                 │     │                 │
└────────┬────────┘     └────────┬────────┘     └─────────────────┘
│                       │
│                       │
▼                       ▼
┌─────────────────────────────────────────┐
│                                         │
│            Nginx (Port 80)              │
│         (Reverse Proxy + SSL)           │
│                                         │
└─────────────────────────────────────────┘

## 📁 Structura Proiectului
interview-booking-app/
├── backend/
│   ├── src/
│   │   ├── config/
│   │   │   ├── database.ts      # Conexiune PostgreSQL
│   │   │   └── ...
│   │   ├── controllers/
│   │   │   ├── authController.js     # Login, Register, Reset Password
│   │   │   ├── bookingController.ts  # CRUD Programări
│   │   │   ├── userController.ts     # CRUD Utilizatori
│   │   │   └── uploadController.js   # Upload/Download documente
│   │   ├── middleware/
│   │   │   ├── auth.ts          # Verificare JWT
│   │   │   ├── authorize.ts     # Verificare roluri
│   │   │   └── rateLimiter.ts   # Rate limiting
│   │   ├── routes/
│   │   │   ├── authRoutes.ts    # /api/auth/*
│   │   │   ├── bookingRoutes.ts # /api/bookings/*
│   │   │   ├── userRoutes.ts    # /api/users/*
│   │   │   └── ...
│   │   ├── services/
│   │   │   └── emailService.ts  # Trimitere emailuri
│   │   └── server.ts            # Entry point
│   ├── uploads/                 # Folder pentru documente
│   ├── package.json
│   └── tsconfig.json
│
├── frontend/
│   ├── src/
│   │   ├── app/                 # Next.js App Router
│   │   │   ├── (admin)/        # Layout admin
│   │   │   │   └── admin/      # Pagini admin
│   │   │   ├── (auth)/         # Layout auth
│   │   │   │   ├── login/
│   │   │   │   └── register/
│   │   │   ├── (dashboard)/    # Layout user
│   │   │   │   ├── bookings/
│   │   │   │   └── profile/
│   │   │   └── booking/        # Pagină publică
│   │   ├── components/
│   │   │   ├── layout/         # Navbar, Sidebar
│   │   │   ├── booking/        # Componente booking
│   │   │   └── ui/             # Componente reutilizabile
│   │   ├── contexts/
│   │   │   └── AuthContext.tsx # Context autentificare
│   │   ├── lib/
│   │   │   └── axios.ts        # Configurare Axios
│   │   └── types/              # TypeScript types
│   ├── public/
│   ├── package.json
│   └── next.config.ts
│
├── ecosystem.config.js          # Configurare PM2
├── .gitignore
└── README.md                   # Acest fișier

## 📡 API Documentation

### Base URLs
- **Development:** http://localhost:5000/api
- **Production:** http://94.156.250.138/api

### Authentication Headers
```javascript
{
  "Authorization": "Bearer YOUR_JWT_TOKEN",
  "Content-Type": "application/json"
}
Endpoints
🔐 Authentication
bashPOST   /api/auth/register       # Înregistrare utilizator nou
POST   /api/auth/login          # Autentificare
POST   /api/auth/logout         # Delogare
GET    /api/auth/me             # Date utilizator curent
POST   /api/auth/forgot-password # Cerere resetare parolă
POST   /api/auth/reset-password  # Resetare parolă cu token
POST   /api/auth/refresh-token   # Reîmprospătare token
📅 Bookings (Programări)
bashGET    /api/bookings            # Lista programări (cu filtrare)
POST   /api/bookings            # Creare programare nouă
GET    /api/bookings/:id        # Detalii programare
PUT    /api/bookings/:id        # Actualizare programare
DELETE /api/bookings/:id        # Ștergere programare
GET    /api/bookings/:id/documents # Documente programare
👥 Users (Admin only)
bashGET    /api/users               # Lista utilizatori
POST   /api/users               # Creare utilizator
GET    /api/users/:id           # Detalii utilizator
PUT    /api/users/:id           # Actualizare utilizator
DELETE /api/users/:id           # Ștergere utilizator
GET    /api/users/:id/documents # Documente utilizator
📁 Documents
bashPOST   /api/upload/document     # Upload document
GET    /api/upload/download/:id # Download document
DELETE /api/upload/document/:id # Ștergere document
GET    /api/documents/user/:userId # Documente utilizator
⏰ Time Slots
bashGET    /api/bookings/time-slots/available/:date # Sloturi disponibile
POST   /api/time-slots/block    # Blocare sloturi (admin)
GET    /api/time-slots          # Toate sloturile
📊 Statistics (Admin)
bashGET    /api/statistics/dashboard # Statistici dashboard
GET    /api/statistics/bookings  # Statistici programări
GET    /api/statistics/users     # Statistici utilizatori
Request/Response Examples
Login Request
jsonPOST /api/auth/login
{
  "email": "user@example.com",
  "password": "password123"
}

Response:
{
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIs...",
  "user": {
    "id": 1,
    "email": "user@example.com",
    "role": "user",
    "first_name": "John",
    "last_name": "Doe"
  }
}
Create Booking
jsonPOST /api/bookings
{
  "client_name": "John Doe",
  "client_email": "john@example.com",
  "client_phone": "0722123456",
  "interview_date": "2025-01-15",
  "interview_time": "14:00",
  "interview_type": "online",
  "notes": "Preferă limba engleză"
}
💾 Baza de Date
Schema principală
users
sqlCREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(100) UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone VARCHAR(20),
    role VARCHAR(50) DEFAULT 'user',
    status VARCHAR(50) DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
bookings
sqlCREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    client_name VARCHAR(255) NOT NULL,
    client_email VARCHAR(255) NOT NULL,
    client_phone VARCHAR(20),
    interview_date DATE NOT NULL,
    interview_time TIME NOT NULL,
    interview_type VARCHAR(50) DEFAULT 'online',
    status VARCHAR(50) DEFAULT 'pending',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
documents
sqlCREATE TABLE documents (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    booking_id INTEGER REFERENCES bookings(id),
    filename VARCHAR(255) NOT NULL,
    original_name VARCHAR(255),
    mime_type VARCHAR(100),
    size INTEGER,
    file_url VARCHAR(500),
    doc_type VARCHAR(50),
    verified_by_admin BOOLEAN DEFAULT FALSE,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
🚀 Instalare și Configurare
Prerequisites

Node.js 18+
PostgreSQL 14+
npm sau yarn
Git

1. Clone Repository
bashgit clone https://github.com/yourusername/interview-booking-app.git
cd interview-booking-app
2. Setup Backend
bashcd backend
npm install

# Creează .env file
cp .env.example .env
# Editează .env cu datele tale

# Setup database
createdb interview_booking_db
npm run migrate

# Build și start
npm run build
npm run dev
3. Setup Frontend
bashcd ../frontend
npm install

# Creează .env.local
cp .env.example .env.local
# Editează .env.local

# Start development
npm run dev
4. Environment Variables
Backend (.env)
env# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME=interview_booking_db
DB_USER=postgres
DB_PASSWORD=your_password

# JWT
JWT_SECRET=your-secret-key-here
JWT_EXPIRES_IN=7d

# Server
PORT=5000
NODE_ENV=development

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Frontend URL
FRONTEND_URL=http://localhost:3000
Frontend (.env.local)
envNEXT_PUBLIC_API_URL=http://localhost:5000/api
NEXT_PUBLIC_APP_URL=http://localhost:3000
🌐 Deployment
PM2 Configuration
javascript// ecosystem.config.js
module.exports = {
  apps: [
    {
      name: 'interview-backend',
      script: './backend/dist/server.js',
      cwd: './backend',
      env: {
        NODE_ENV: 'production'
      }
    },
    {
      name: 'interview-frontend',
      script: 'npm',
      args: 'start',
      cwd: './frontend',
      env: {
        NODE_ENV: 'production'
      }
    }
  ]
};
Nginx Configuration
nginxserver {
    listen 80;
    server_name 94.156.250.138;

    # Frontend
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Backend API
    location /api {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Uploads
    location /uploads {
        alias /home/apps/interview-booking-app/backend/uploads;
        try_files $uri =404;
    }
}
Deploy Commands
bash# Build projects
cd backend && npm run build
cd ../frontend && npm run build

# Start with PM2
pm2 start ecosystem.config.js
pm2 save
pm2 startup

# Nginx
sudo nginx -t
sudo systemctl reload nginx
🔒 Securitate
Implementări curente:

Passwords: Bcrypt cu salt rounds = 10
JWT: Tokens cu expirare 7 zile
CORS: Configurare strictă
Rate Limiting: 100 requests/15min per IP
Input Validation: Express-validator pe toate rutele
SQL Injection: Parametrized queries
XSS Protection: Helmet.js
HTTPS: SSL/TLS cu Let's Encrypt

Best Practices:

Toate parolele sunt hash-uite
Tokens stocate în httpOnly cookies
Validare server-side pe toate inputurile
Sanitizare date înainte de stocare
Logs pentru acțiuni importante

🔧 Comenzi Utile
Development
bash# Backend
cd backend
npm run dev          # Start cu nodemon
npm run build        # Compile TypeScript
npm run test         # Run tests
npm run lint         # Check code

# Frontend  
cd frontend
npm run dev          # Development server
npm run build        # Production build
npm run lint         # Check code
npm run type-check   # TypeScript check
Database
bash# Connect to PostgreSQL
psql -U postgres -d interview_booking_db

# Backup database
pg_dump -U postgres interview_booking_db > backup.sql

# Restore database
psql -U postgres interview_booking_db < backup.sql

# Run migrations
cd backend
npm run migrate:up
npm run migrate:down
PM2 Commands
bashpm2 status           # Vezi status procese
pm2 logs            # Vezi toate logurile
pm2 logs interview-backend  # Logs backend
pm2 logs interview-frontend # Logs frontend
pm2 restart all     # Restart tot
pm2 monit           # Monitor real-time
Maintenance
bash# Update dependencies
npm update          # Update minor versions
npm outdated       # Check outdated
npx npm-check-updates -u  # Update major

# Clean cache
npm cache clean --force
rm -rf node_modules package-lock.json
npm install

# Check disk space
df -h
du -sh *

# Check ports
sudo netstat -plnt
lsof -i :3000
lsof -i :5000
🐛 Troubleshooting
Common Issues
1. Port Already in Use
bash# Find process
lsof -i :3000
# Kill process
kill -9 PID
2. Database Connection Error
bash# Check PostgreSQL status
sudo systemctl status postgresql
# Restart PostgreSQL
sudo systemctl restart postgresql
# Check logs
sudo tail -f /var/log/postgresql/postgresql-14-main.log
3. CORS Errors

Verifică FRONTEND_URL în backend .env
Verifică headers în Nginx config
Check browser console pentru exact error

4. JWT Token Invalid

Verifică JWT_SECRET este același
Check token expiration
Clear browser cookies/localStorage

5. File Upload Issues
bash# Check permissions
ls -la backend/uploads
# Fix permissions
sudo chown -R www-data:www-data backend/uploads
sudo chmod -R 755 backend/uploads
📈 Monitoring
PM2 Monitoring
bash# Basic monitoring
pm2 monit

# Web dashboard
pm2 install pm2-web
pm2 web
Logs Location

Backend logs: backend/logs/
PM2 logs: ~/.pm2/logs/
Nginx logs: /var/log/nginx/
PostgreSQL logs: /var/log/postgresql/

🤝 Contribuții
Git Workflow

Fork repository
Create feature branch (git checkout -b feature/AmazingFeature)
Commit changes (git commit -m 'Add AmazingFeature')
Push to branch (git push origin feature/AmazingFeature)
Open Pull Request

Code Standards

Use TypeScript for type safety
Follow ESLint rules
Write meaningful commit messages
Add tests for new features
Update documentation

Commit Convention
feat: add new feature
fix: bug fix
docs: documentation changes
style: formatting, missing semicolons, etc
refactor: code refactoring
test: adding tests
chore: maintain
📄 License
This project is licensed under the MIT License.
👥 Team

Adrian - Full Stack Developer - @adrian32adrian32

🙏 Acknowledgments

Next.js team for amazing framework
Vercel for documentation
Open source community


Dezvoltat cu ❤️ pentru o experiență mai bună în procesul de recrutare

Acum salvează și commit:

```bash
# Commit pe GitHub
git add README.md
git commit -m "docs: Update README with complete project documentation"
git push origin main
Acest README conține:

✅ Toate funcționalitățile implementate
✅ Stack tehnologic complet detaliat
✅ Structura proiectului explicată
✅ API documentation completă cu exemple
✅ Schema bazei de date
✅ Ghid complet de instalare
✅ Configurații pentru deployment
✅ Securitate și best practices
✅ Comenzi utile organizate
✅ Troubleshooting pentru probleme comune
✅ Informații despre monitoring
✅ Ghid pentru contribuții

Documentul este organizat logic cu cuprins pentru navigare ușoară și conține toate informațiile necesare pentru a continua dezvoltarea proiectului.
